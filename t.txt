### You can do it automatically by using python auto.py

kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.14.4/cert-manager.yaml
# Wait for cert manager
kubectl wait --for=condition=available --timeout=600s deployment/cert-manager -n cert-manager
kubectl wait --for=condition=available --timeout=600s deployment/cert-manager-cainjector -n cert-manager
kubectl wait --for=condition=available --timeout=600s deployment/cert-manager-webhook -n cert-manager
kubectl apply -f cockroach/cockroach_issuer.yaml
helm repo add cockroachdb https://charts.cockroachdb.com/
helm repo add grafana https://grafana.github.io/helm-charts
helm repo update
helm install cockroach --values cockroach/cockroach_values.yaml cockroachdb/cockroachdb
kubectl label svc cockroach-cockroachdb prometheus=cockroachdb
#Get latest version here https://github.com/prometheus-operator/prometheus-operator/releases/
kubectl apply -f https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/v0.73.1/bundle.yaml --server-side
kubectl apply -f cockroach/prometheus.yaml

helm install grafana grafana/grafana

kubectl apply -f cockroach/cockroach-secure.yaml

kubectl exec -it cockroachdb-client-secure -- cockroach sql --certs-dir=./cockroach-certs --host=cockroach-cockroachdb-public -e "CREATE USER roach WITH LOGIN PASSWORD 'password'; CREATE TABLE IF NOT EXISTS links(short_link TEXT, full_link TEXT, last_accessed TIMESTAMP, PRIMARY KEY(short_link)); GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE links TO roach;"

helm install redis oci://registry-1.docker.io/bitnamicharts/redis

kubectl apply -f app.yaml

# Access to cluster useful information

kubectl exec -it cockroachdb-client-secure -- cockroach sql --certs-dir=./cockroach-certs --host=cockroach-cockroachdb-public # Access cockroach db as root
kubectl port-forward service/cockroach-cockroachdb-public 8080 # localhost:8080 / roach:password / Access cockroachdb admin panel
kubectl port-forward prometheus-cockroachdb-0 9090 # localhost:9090 / Access prometheus admin panel
kubectl port-forward alertmanager-cockroachdb-0 9093 # localhost:9093 / Access alertmanager
# Windows (PowerShell) command

kubectl get secret grafana -o jsonpath="{.data.admin-password}" | ForEach-Object { [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($_)) }

# Linux command
kubectl get secret grafana -o jsonpath="{.data.admin-password}" | base64 --decode ; echo

kubectl port-forward deployment/grafana 3000 # localhost:3000 / admin:password_from_command_above

To add prometheus to grafana, you need to log in grafana as shown above
Add a data source and set the URL to http://prometheus-operated.default.svc.cluster.local:9090.
Then create a visualization, and it got to be working

kubectl exec --namespace default -it svc/jenkins -c jenkins -- /bin/cat /run/secrets/additional/chart-admin-password

kubectl port-forward svc/jenkins 8080:8080 # localhost:8080 / admin:password_from_command_above

minikube delete ; minikube start --cpus=8 --memory=15800

helm repo add jenkins https://charts.jenkins.io
helm repo update
helm install jenkins jenkins/jenkins

kubectl apply -f https://raw.githubusercontent.com/jenkins-infra/jenkins.io/master/content/doc/tutorials/kubernetes/installing-jenkins-on-kubernetes/jenkins-volume.yaml
